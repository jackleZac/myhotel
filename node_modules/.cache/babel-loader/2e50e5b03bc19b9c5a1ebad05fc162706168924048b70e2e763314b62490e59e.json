{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Documents\\\\myhotel\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create the provider component\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [authToken, setAuthToken] = useState(null);\n\n  // Load token from localStorage if it exists\n  useEffect(() => {\n    const token = localStorage.getItem(\"authToken\");\n    if (token) {\n      setAuthToken(token);\n    }\n  }, []);\n\n  // Store token in localStorage when it changes\n  useEffect(() => {\n    if (authToken) {\n      localStorage.setItem(\"authToken\", authToken);\n    } else {\n      localStorage.removeItem(\"authToken\");\n    }\n  }, [authToken]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authToken,\n      setAuthToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"MU7XoFqhOQt3LwaTqLMgtB35PqI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","_s","children","authToken","setAuthToken","token","localStorage","getItem","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Documents/myhotel/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n// Create the context\r\nexport const AuthContext = createContext();\r\n\r\n// Create the provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authToken, setAuthToken] = useState(null);\r\n\r\n  // Load token from localStorage if it exists\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    if (token) {\r\n      setAuthToken(token);\r\n    }\r\n  }, []);\r\n\r\n  // Store token in localStorage when it changes\r\n  useEffect(() => {\r\n    if (authToken) {\r\n      localStorage.setItem(\"authToken\", authToken);\r\n    } else {\r\n      localStorage.removeItem(\"authToken\");\r\n    }\r\n  }, [authToken]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authToken, setAuthToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMM,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,EAAE;MACTD,YAAY,CAACC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAV,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,EAAE;MACbG,YAAY,CAACE,OAAO,CAAC,WAAW,EAAEL,SAAS,CAAC;IAC9C,CAAC,MAAM;MACLG,YAAY,CAACG,UAAU,CAAC,WAAW,CAAC;IACtC;EACF,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC;EAEf,oBACEN,OAAA,CAACC,WAAW,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAER,SAAS;MAAEC;IAAa,CAAE;IAAAF,QAAA,EACtDA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACd,EAAA,CAzBWF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}