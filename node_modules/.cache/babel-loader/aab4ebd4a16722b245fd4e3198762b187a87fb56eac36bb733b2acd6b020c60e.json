{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Documents\\\\myhotel\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute(_ref) {\n  _s();\n  let {\n    children,\n    requiredRole\n  } = _ref;\n  const {\n    authToken,\n    userRole\n  } = useContext(AuthContext);\n  const location = useLocation();\n\n  // Redirect to login if not authenticated\n  if (!authToken) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/login?redirect=${encodeURIComponent(location.pathname)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to a forbidden message if role doesn't match\n  if (requiredRole && userRole !== requiredRole) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Access Denied: You do not have permission to view this page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated and role is valid, render the child component\n  return children;\n}\n_s(ProtectedRoute, \"4g/3QHZhki1SFtNsgNOV8JjILgc=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useContext","AuthContext","jsxDEV","_jsxDEV","ProtectedRoute","_ref","_s","children","requiredRole","authToken","userRole","location","to","encodeURIComponent","pathname","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Documents/myhotel/src/components/ProtectedRoute.js"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate, useLocation } from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nfunction ProtectedRoute({ children, requiredRole }) {\r\n  const { authToken, userRole } = useContext(AuthContext);\r\n  const location = useLocation();\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!authToken) {\r\n    return <Navigate to={`/login?redirect=${encodeURIComponent(location.pathname)}`} />;\r\n  }\r\n\r\n  // Redirect to a forbidden message if role doesn't match\r\n  if (requiredRole && userRole !== requiredRole) {\r\n    return <div>Access Denied: You do not have permission to view this page.</div>;\r\n  }\r\n\r\n  // If authenticated and role is valid, render the child component\r\n  return children;\r\n}\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,cAAcA,CAAAC,IAAA,EAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,QAAQ;IAAEC;EAAa,CAAC,GAAAH,IAAA;EAChD,MAAM;IAAEI,SAAS;IAAEC;EAAS,CAAC,GAAGV,UAAU,CAACC,WAAW,CAAC;EACvD,MAAMU,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAI,CAACU,SAAS,EAAE;IACd,oBAAON,OAAA,CAACL,QAAQ;MAACc,EAAE,EAAE,mBAAmBC,kBAAkB,CAACF,QAAQ,CAACG,QAAQ,CAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrF;;EAEA;EACA,IAAIV,YAAY,IAAIE,QAAQ,KAAKF,YAAY,EAAE;IAC7C,oBAAOL,OAAA;MAAAI,QAAA,EAAK;IAA4D;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChF;;EAEA;EACA,OAAOX,QAAQ;AACjB;AAACD,EAAA,CAhBQF,cAAc;EAAA,QAEJL,WAAW;AAAA;AAAAoB,EAAA,GAFrBf,cAAc;AAkBvB,eAAeA,cAAc;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}