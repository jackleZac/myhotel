{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Documents\\\\myhotel\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create the provider component\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [authToken, setAuthToken] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [userId, setUserId] = useState(null); // Added userId state\n\n  // Load data from localStorage if it exists\n  useEffect(() => {\n    const token = localStorage.getItem(\"authToken\");\n    if (token) {\n      setAuthToken(token);\n    }\n    const role = localStorage.getItem(\"userRole\");\n    if (role) {\n      setUserRole(role);\n    }\n    const id = localStorage.getItem(\"userId\");\n    if (id) {\n      setUserId(id);\n    }\n  }, []);\n\n  // Store token, userRole, and userId in localStorage when they change\n  useEffect(() => {\n    if (authToken) {\n      localStorage.setItem(\"authToken\", authToken);\n    } else {\n      localStorage.removeItem(\"authToken\");\n    }\n    if (userRole) {\n      localStorage.setItem(\"userRole\", userRole);\n    } else {\n      localStorage.removeItem(\"userRole\");\n    }\n    if (userId) {\n      localStorage.setItem(\"userId\", userId);\n    } else {\n      localStorage.removeItem(\"userId\");\n    }\n  }, [authToken, userRole, userId]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authToken,\n      setAuthToken,\n      userRole,\n      setUserRole,\n      userId,\n      setUserId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"xP1SKaHndRDca0M4StBpPN8TK3k=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","_s","children","authToken","setAuthToken","userRole","setUserRole","userId","setUserId","token","localStorage","getItem","role","id","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Documents/myhotel/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n// Create the context\r\nexport const AuthContext = createContext();\r\n\r\n// Create the provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authToken, setAuthToken] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [userId, setUserId] = useState(null);  // Added userId state\r\n\r\n  // Load data from localStorage if it exists\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    if (token) {\r\n      setAuthToken(token);\r\n    }\r\n\r\n    const role = localStorage.getItem(\"userRole\");\r\n    if (role) {\r\n      setUserRole(role);\r\n    }\r\n\r\n    const id = localStorage.getItem(\"userId\");\r\n    if (id) {\r\n      setUserId(id);\r\n    }\r\n  }, []);\r\n\r\n  // Store token, userRole, and userId in localStorage when they change\r\n  useEffect(() => {\r\n    if (authToken) {\r\n      localStorage.setItem(\"authToken\", authToken);\r\n    } else {\r\n      localStorage.removeItem(\"authToken\");\r\n    }\r\n\r\n    if (userRole) {\r\n      localStorage.setItem(\"userRole\", userRole);\r\n    } else {\r\n      localStorage.removeItem(\"userRole\");\r\n    }\r\n\r\n    if (userId) {\r\n      localStorage.setItem(\"userId\", userId);\r\n    } else {\r\n      localStorage.removeItem(\"userId\");\r\n    }\r\n  }, [authToken, userRole, userId]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authToken, setAuthToken, userRole, setUserRole, userId, setUserId }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMM,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,EAAE;MACTL,YAAY,CAACK,KAAK,CAAC;IACrB;IAEA,MAAMG,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC7C,IAAIC,IAAI,EAAE;MACRN,WAAW,CAACM,IAAI,CAAC;IACnB;IAEA,MAAMC,EAAE,GAAGH,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACzC,IAAIE,EAAE,EAAE;MACNL,SAAS,CAACK,EAAE,CAAC;IACf;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlB,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,EAAE;MACbO,YAAY,CAACI,OAAO,CAAC,WAAW,EAAEX,SAAS,CAAC;IAC9C,CAAC,MAAM;MACLO,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;IACtC;IAEA,IAAIV,QAAQ,EAAE;MACZK,YAAY,CAACI,OAAO,CAAC,UAAU,EAAET,QAAQ,CAAC;IAC5C,CAAC,MAAM;MACLK,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;IACrC;IAEA,IAAIR,MAAM,EAAE;MACVG,YAAY,CAACI,OAAO,CAAC,QAAQ,EAAEP,MAAM,CAAC;IACxC,CAAC,MAAM;MACLG,YAAY,CAACK,UAAU,CAAC,QAAQ,CAAC;IACnC;EACF,CAAC,EAAE,CAACZ,SAAS,EAAEE,QAAQ,EAAEE,MAAM,CAAC,CAAC;EAEjC,oBACEV,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEd,SAAS;MAAEC,YAAY;MAAEC,QAAQ;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAU,CAAE;IAAAN,QAAA,EAChGA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpB,EAAA,CAjDWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}